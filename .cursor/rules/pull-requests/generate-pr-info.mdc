---
description: Generate a PR title and a Markdown PR description as exactly two copyable code blocks (ask-only). Conventional Commit prefix + planton.ai-aware scope from file paths. No repo edits.
globs:
alwaysApply: false
---

# Rule: Pull Request Title and Description (ask-only)

Purpose: When asked to write a PR title and PR description, respond with exactly two copyable code blocks — first the title, then the description — without making any repository changes.

This rule is designed for ask mode only. Do not modify files, run commands, or propose edits. Output only the two fenced code blocks described below.

Usage: In Ask mode, invoke explicitly as `@pr-info`.

## How to respond (strict)
1) First block: PR Title
   - Fenced code block with language: `text`
   - Single line only
   - Prefix using Conventional Commits: one of `feat`, `fix`, `refactor`, `docs`, `test`, `perf`, `ci`, `build`, `chore`, `revert`
   - Scope is required and must be planton.ai-aware, using a path-like token derived from changed files (heuristics below)
   - Imperative mood, concise, ≤ 72 characters after the prefix
   - No trailing period

2) Second block: PR Description
   - Fenced code block with language: `markdown`
   - Use the following sections when applicable. Omit any that are not relevant.
     - "Summary": 1–3 sentences describing what this PR does in plain language
     - "Context": Why this change is needed (problem, bug, or goal)
     - "Changes": Bullet list of key changes; group by area if helpful
     - "Implementation notes": Important design decisions or trade-offs
     - "Breaking changes": Clearly call out any breaking behavior and migration steps
     - "Test plan": How this was verified (tests, manual steps, screenshots/links)
     - "Risks": Known risks or rollback plan
     - "Checklist": Markdown checkboxes for docs, tests, backward compatibility
     - Optionally include issue links like `Closes #123` when known

## Title format (exactly)

```text
<prefix>(<scope-path>): <concise, imperative title>
```

## planton.ai-aware scope heuristics

Determine the `<scope-path>` from the changed files. Use the most impacted area by lines changed; if multiple, see multi-area guidance below.

- Website app (Next.js application)
  - `src/app/**` → `website/app`
  - `src/lib/**` → `website/lib`
  - `public/**` → `website/public`
  - Root app configuration (e.g., `next.config.ts`, `tailwind.config.ts`, `eslint.config.mjs`, `tsconfig.json`, `postcss.config.mjs`) → `website/config`

- Content sources
  - `content/docs/**` → `docs`
  - `content/blog/**` → `blog`
  - `workspace/**` (drafts, transcripts, internal content staging) → `content/workspace`

- Project meta and tooling
  - `.cursor/**` → `.cursor`
  - `Makefile`, `README.md`, repo-level workflows or scripts → `repo`

### Multi-area changes
- If changes span multiple areas within the same parent, use the shared parent:
  - `src/app` and `src/lib` → `website`
  - Multiple content sections under `content/docs/**` → `docs`
- If changes are broadly cross-cutting (≥3 unrelated parents), use `repo`.

## How to infer the title prefix
- `feat`: Adds a new capability, page, component, or content section
- `fix`: Corrects a bug or content error
- `refactor`: Code restructuring without user-visible behavior changes
- `docs`: Documentation-only changes (most `content/docs/**` or README updates)
- `test`: Tests only
- `perf`: Performance improvements
- `ci`: CI pipeline/config changes
- `build`: Build system or dependency changes
- `chore`: Routine maintenance (formatting, small cleanups) not covered above
- `revert`: Reverts a previous commit/PR

Prefer `feat` vs `refactor` based on whether user-facing capability is introduced. Prefer `fix` when the primary intent is to resolve a defect, even if some refactoring was required.

## Inputs to use when generating
- The full diff and edit history from this session
- Changed files and their paths to infer scope using the rules above
- Commit messages, branch name, or linked issues if available

If context is insufficient to infer details, choose the best effort scope from filenames and touched areas. Do not ask questions; still produce both blocks.

## Output blocks (exactly two, nothing else)

```text
<prefix>(<scope-path>): <concise, imperative title>
```

```markdown
## Summary
<1–3 sentences>

## Context
<why this change was needed>

## Changes
- <key change 1>
- <key change 2>
- <key change 3>

## Implementation notes
- <notable decision or trade-off>

## Breaking changes
- <explicitly list or state "None">

## Test plan
- <how verified>

## Risks
- <risks and rollback>

## Checklist
- [ ] Docs updated (if needed)
- [ ] Tests added/updated (if needed)
- [ ] Backward compatible

<!-- Optionally: Closes #123 -->
```

@README.md

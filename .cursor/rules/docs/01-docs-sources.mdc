---
description: Source-of-truth and referencing guide for Planton.ai docs/blogs. Requires grounding in project-planton and planton-cloud source code and READMEs.
alwaysApply: false
---

# Rule: Docs Source-of-Truth and Referencing

Purpose: Every new documentation or blog page must be grounded in actual source artifacts across this workspace — no speculation. Consult protobuf/API definitions, IaC modules, CLI and backend code, and package READMEs. Cite what you used.

Usage: Invoke explicitly as `@docs-sources` before drafting or editing content under `content/docs/**` or `content/blog/**`.

## Golden Sources
When documenting a feature, consult these in order. Prefer direct code or READMEs over memory.

1) Project Planton (open-source Lego blocks / cloud resources)
   - Path: `project-planton/apis/project/planton/provider/<provider>/<legoblock>/`
   - Contents per legoblock (cloudresource):
     - Protobuf or schema: API/Spec definition for the resource
     - IaC modules: Pulumi and Terraform implementation
     - Any examples and READMEs colocated in the package

2) Planton Cloud platform APIs (domain objects)
   - Path: `planton-cloud/apis/cloud/planton/<bounded-context>/**`
   - Domain-oriented protobufs for platform features. Choose the domain matching the feature you document.

3) Backend services (bounded contexts)
   - Path: `planton-cloud/backend/services/<domain-service>/`
   - Each service corresponds to a domain model; closely related to bounded-context in protobuf packages. Look for README.md and handler/service logic.
   - Important domains:
     - Infra Hub: `backend/services/infra-hub` (platform APIs that orchestrate provisioning and tie to Project Planton legoblocks)
     - ServiceHub: `backend/services/service-hub` (builds and deployments; orchestration via Temporal; core objects: Service, Pipeline)

4) CLI (first-class interface)
   - Written in golang using cobra package
   - Path: `planton-cloud/client-apps/cli` and `planton-cloud/client-apps/cli/internal/...` for library code used by CLI
   - The CLI is the source of truth for end-to-end flows; features land here first, then surface in the web console.

5) Web console (Next.js)
   - Path: `planton-cloud/client-apps/web-console` — used to understand UI flows and wording, but do not derive API behavior solely from UI.
   - Interacts with backend using grpc using typscript stubs generated for apis from planton-cloud/apis imported from Buf Schema Registry.

## Infra Hub and ServiceHub Context
- Infra Hub: Provides one-click provisioning by composing platform APIs with open-source legoblocks from Project Planton. When documenting provisioning workflows, cite both:
  - Platform API(s) under `backend/services/infra-hub` and their protobufs under `apis/cloud/planton/...`
  - The specific legoblock package(s) under `project-planton/apis/project/planton/provider/...`
- ServiceHub: Vercel-like DX for backend services. On a commit push, the platform resolves the `Service` for the repo and creates a `Pipeline` (orchestrated by Temporal). When documenting builds/deploys, reference:
  - `backend/services/service-hub` code and README(s)
  - Protobuf definitions for `Service` and `Pipeline` under `apis/cloud/planton/...`

## Referencing Requirements (strict)
- Do not invent behaviors or APIs. Assertions must be backed by one of:
  - Source files (protobuf, Go/Java, TypeScript), READMEs, or IaC modules in this workspace
  - Verbatim transcripts or written specs provided in context
- Prefer direct citations (paths and identifiers) near claims. Example: “Provision creates `awsekscluster` via `project-planton/apis/project/planton/provider/aws/awsekscluster` and records status via `backend/services/infra-hub`.”
- If unsure, read the code. If still unclear, mark as TODO with a precise question instead of guessing.

## How to Write a New Docs Page Using Sources
1) Identify the user outcome (what they will achieve via CLI or console).
2) Map to platform APIs (protobufs under `apis/cloud/planton/...`). List objects, fields, and relationships.
3) Map to implementation:
   - Infra Hub/ServiceHub service logic under `backend/services/...`
   - Relevant legoblock(s) under `project-planton/apis/project/planton/provider/...` including IaC
4) Request for the screenshots or CLI commands to be included in the documentation if they are not already provided in the context. It is not possible to auto-infer those things from the source code. 
5) Extract accurate parameters, defaults, and constraints from code and IaC.
6) Produce copy-pastable examples; note any prerequisites.
7) Add links to the exact folders/files you consulted.

## Checklist (must pass before publishing)
- Source-backed: Every claim traces to protobuf, code, IaC, README, or transcript
- Paths referenced: Include at least one concrete path for each key API or legoblock
- CLI-first validated: Steps verified with CLI usage; console steps optional add-on
- No fabrication: Avoid placeholders; mark unknowns as TODO with a specific follow-up
- Domain alignment: Docs reflect the bounded context’s service and its protobuf package

## Snippets and Linking Conventions
- Use fenced code blocks with language tags and realistic commands.
- Reference file paths using backticks and provide short context on their role.
- Prefer relative repository paths when linking inside this workspace; use GitHub links when necessary.

## Examples
Infra Hub + EKS cluster provisioning (high-level reference):
- Legoblock: `project-planton/apis/project/planton/provider/aws/awsekscluster`
- Platform API: `planton-cloud/apis/cloud/planton/apis/...` (domain-specific)
- Orchestration: `planton-cloud/backend/services/infra-hub`

ServiceHub pipeline on commit:
- Core models: `Service`, `Pipeline` (protobufs under `apis/cloud/planton/...`)
- Orchestration: `planton-cloud/backend/services/service-hub` with Temporal

@README.md
